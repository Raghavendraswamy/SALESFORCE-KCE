@isTest
public class TestVerifyDate {

    @isTest
    static void testDateWithin30Days() {
        // Arrange: date2 within 30 days after date1
        Date date1 = Date.today();
        Date date2 = date1.addDays(10); // within 30 days

        // Act
        Date result = VerifyDate.CheckDates(date1, date2);

        // Assert: Since date2 is within 30 days, result should be date2
        System.assertEquals(date2, result, 'Should return date2 when within 30 days');
    }

    @isTest
    static void testDateMoreThan30Days() {
        // Arrange: date2 more than 30 days after date1
        Date date1 = Date.today();
        Date date2 = date1.addDays(40); // more than 30 days

        // Act
        Date result = VerifyDate.CheckDates(date1, date2);

        // Expected: Should return end of month of date1
        Integer totalDays = Date.daysInMonth(date1.year(), date1.month());
        Date expectedEndOfMonth = Date.newInstance(date1.year(), date1.month(), totalDays);

        // Assert
        System.assertEquals(expectedEndOfMonth, result, 'Should return end of month when date2 is beyond 30 days');
    }

    @isTest
    static void testDateInPast() {
        // Arrange: date2 is before date1 (in the past)
        Date date1 = Date.today();
        Date date2 = date1.addDays(-5); // past date

        // Act
        Date result = VerifyDate.CheckDates(date1, date2);

        // Expected: Should return end of month of date1
        Integer totalDays = Date.daysInMonth(date1.year(), date1.month());
        Date expectedEndOfMonth = Date.newInstance(date1.year(), date1.month(), totalDays);

        // Assert
        System.assertEquals(expectedEndOfMonth, result, 'Should return end of month when date2 is in the past');
    }
}

---------------------------------------------------------------

public class VerifyDate {
  //method to handle potential checks against two dates
  public static Date CheckDates(Date date1, Date date2) {
    //if date2 is within the next 30 days of date1, use date2.  Otherwise use the end of the month
    if(DateWithin30Days(date1,date2)) {
      return date2;
    } else {
      return SetEndOfMonthDate(date1);
    }
  }
  //method to check if date2 is within the next 30 days of date1
  private static Boolean DateWithin30Days(Date date1, Date date2) {
    //check for date2 being in the past
    if( date2 < date1) { return false; }
    //check that date2 is within (>=) 30 days of date1
    Date date30Days = date1.addDays(30); //create a date 30 days away from date1
    if( date2 >= date30Days ) { return false; }
    else { return true; }
  }
  //method to return the end of the month of a given date
  private static Date SetEndOfMonthDate(Date date1) {
    Integer totalDays = Date.daysInMonth(date1.year(), date1.month());
    Date lastDay = Date.newInstance(date1.year(), date1.month(), totalDays);
    return lastDay;
  }
}




